name: Build and Deploy Iris API to GKE

on:
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps
env:
  GCP_PROJECT_ID: arboreal-harbor-461417-u1
  GKE_CLUSTER: mlops-cluster-1
  GKE_REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  REPO_NAME: w6-mlops
  IMAGE_NAME: w6-demo
  # MODEL_BUCKET_URI: gs://mlops-course-mlopsweek1-unique/my-models/iris-classifier-week-1/model.joblib

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20 # Prevent runaway jobs

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      id: 'auth' # Assign an ID to this step to refer to its outputs if needed
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Run training file
      run: |
        echo "Running The training file"
        # gcloud storage cp "${{ env.MODEL_BUCKET_URI }}" ./api/model.joblib
        python train.py
        echo "Model.joblib saved"

    - name: Set up GKE credentials
      run: |
        echo "ðŸ”— Configuring kubectl for GKE cluster..."
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_REGION }} --project ${{ env.GCP_PROJECT_ID }}
        echo "âœ… GKE credentials configured."

    - name: Install gke-gcloud-auth-plugin
      run: |
        # echo "ðŸ”§ Setting up Google Cloud APT repository..."
        # sudo apt-get update
        # sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
        # curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        # echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        
        echo "ðŸ”§ Installing gke-gcloud-auth-plugin..."
        sudo apt-get update
        sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin
        echo "gke-gcloud-auth-plugin installed."

    - name: Configure Docker for Artifact Registry
      run: |
        echo "Configuring Docker for Artifact Registry..."
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
        echo "Docker configured."

    - name: Build and Push Docker Image
      run: |
        echo "ðŸ”¨ Building Docker image..."
        IMAGE_TAG_SHA="${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        IMAGE_TAG_LATEST="${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest"
        
        docker build -t "$IMAGE_TAG_SHA" -t "$IMAGE_TAG_LATEST" ./api
        
        echo "Pushing Docker images..."
        docker push "$IMAGE_TAG_SHA"
        docker push "$IMAGE_TAG_LATEST"
        
        echo "Docker images built and pushed."
        echo "IMAGE_TAG_SHA=$IMAGE_TAG_SHA" >> $GITHUB_ENV

    - name: Deploy to GKE
      run: |
        echo "Deploying to GKE..."
        sed -i "s|image: .*|image: ${{ env.IMAGE_TAG_SHA }}|g" deployment.yaml
        
        echo "Applying updated deployment.yaml:"
        cat deployment.yaml
        
        kubectl apply -f deployment.yaml
        
        echo "Waiting for deployment rollout to complete..."
        kubectl rollout status deployment/iris-api-deployment --timeout=300s
        echo "Deployment completed successfully."

    - name: Get Deployed Service IP
      run: |
        echo "Waiting for LoadBalancer to get an external IP..."
        EXTERNAL_IP=""
        for i in {1..12}; do
          sleep 30
          EXTERNAL_IP=$(kubectl get service iris-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [ -n "$EXTERNAL_IP" ]; then
            echo "External IP obtained: $EXTERNAL_IP"
            break
          fi
          echo "Attempt $i: Still waiting for external IP..."
        done
        
        if [ -z "$EXTERNAL_IP" ]; then
          echo "Failed to get external IP after 6 minutes."
          exit 1
        fi
        
        echo "Deployment successful! Your API is available at: http://$EXTERNAL_IP"
